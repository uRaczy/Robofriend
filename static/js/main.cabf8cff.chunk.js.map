{"version":3,"sources":["serviceWorker.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Background.js","components/Scroll.js","containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","_ref","id","name","email","react_default","a","createElement","className","src","concat","alt","CardList","robots","cardArray","map","each","i","components_Card","key","SearchBox","searchChange","type","placeholder","onChange","randomRGB","Math","floor","random","setBackground","document","body","style","background","Scroll","props","overflowY","height","children","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSearchChange","event","setState","seachfield","target","value","state","_this2","fetch","then","response","json","users","_this3","filteredRobots","filter","robot","toLowerCase","includes","onClick","components_SearchBox","components_Scroll","components_CardList","React","Component","ReactDOM","render","src_containers_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.cabf8cff.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\n\r\nconst Card = ( { id, name, email } ) => {\r\n    return(\r\n        <div className='bg-dark-green light-yellow tc ba bw2 b--near-black br3 pa3 ma2 shadow-5 dib grow w-auto-ns w-40-m w-20-l'>\r\n            <img src={`https://robohash.org/${id}?size=240x240`} alt=\"robo foto\" />\r\n            \r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ( {robots} ) =>\r\n{\r\n    const cardArray = robots.map((each, i) =>{\r\n            return(\r\n                <Card \r\n                key={robots[i].id} \r\n                id={robots[i].id} \r\n                name={robots[i].name} \r\n                email={robots[i].email} />\r\n            );\r\n        }\r\n    )\r\n\r\n    return(\r\n        <div>\r\n            {cardArray}\r\n        </div>\r\n    );\r\n}\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchChange }) => {\r\n    return (\r\n        <div className='bg-dark-green light-yellow tc bw2 b--near-black br1 pa3 dib'>\r\n            <input className='bg-lightest-blue tc pa2'\r\n                type='search'\r\n                name='searchbar'\r\n                placeholder='Search robots' \r\n                onChange={searchChange}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default  SearchBox;","const randomRGB = () => Math.floor(Math.random() * 255);\r\n\r\n const randomDegree = () => Math.floor(Math.random() *360);\r\n\r\nexport const setBackground = () => {\r\n        document.body.style.background =\r\n        `linear-gradient(${randomDegree()}deg,\r\n        rgb(${randomRGB()}, ${randomRGB()}, ${randomRGB()}),\r\n        rgb(${randomRGB()}, ${randomRGB()}, ${randomRGB()}))`\r\n    };","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return(\r\n        <div style={{ overflowY: 'scroll',  height: '100vh' }}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Scroll;","import React from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport { setBackground } from '../components/Background';\r\nimport Scroll from '../components/Scroll';\r\nimport './App.css';\r\n\r\n\r\n\r\nclass App extends React.Component {\r\n    constructor()\r\n    {\r\n        super();\r\n        this.state ={\r\n            robots: [],\r\n            seachfield: ''\r\n        }\r\n    }\r\n\r\n    onSearchChange = (event) => {\r\n        this.setState({ seachfield:  event.target.value });\r\n    }\r\n    \r\n    componentDidMount() {\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response => response.json())\r\n        .then(users => this.setState({ robots: users}));\r\n        setBackground();\r\n    }\r\n\r\n    render(){\r\n        const filteredRobots = this.state.robots.filter(robot => {\r\n            return robot.name.toLowerCase().includes(this.state.seachfield.toLowerCase())\r\n        })\r\n\r\n\r\n        // document.body.style.background  = BG.setBackground;\r\n        // setBackground();\r\n        \r\n        return(\r\n            <div>\r\n                <h1 className='f1'>Robofriends</h1>\r\n                <input type=\"button\" className=\"myButton\" value=\"Background\" onClick={setBackground} />\r\n                <br />\r\n                <SearchBox  searchChange={this.onSearchChange}/>\r\n                <Scroll>\r\n                    <CardList robots= {filteredRobots}/>\r\n                </Scroll>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport App from './containers/App';\n\n\nReactDOM.render(\n<App />\n    , document.getElementById('root'));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}